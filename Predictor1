import socket
import joblib
import numpy as np
import pandas as pd

# Load the trained classifier
model = joblib.load('eeg_classifier_model.pkl')

# Feature names used during training
feature_names = [
        'Delta1', 'Delta2', 'Delta3', 'Delta4', 'Delta5', 'Delta6', 'Delta7', 'Delta8',
        'Theta1', 'Theta2', 'Theta3', 'Theta4', 'Theta5', 'Theta6', 'Theta7', 'Theta8',
        'Alpha1', 'Alpha2', 'Alpha3', 'Alpha4', 'Alpha5', 'Alpha6', 'Alpha7', 'Alpha8',
        'BetaLow1', 'BetaLow2', 'BetaLow3', 'BetaLow4', 'BetaLow5', 'BetaLow6', 'BetaLow7', 'BetaLow8',
        'BetaMid1', 'BetaMid2', 'BetaMid3', 'BetaMid4', 'BetaMid5', 'BetaMid6', 'BetaMid7', 'BetaMid8',
        'BetaHigh1', 'BetaHigh2', 'BetaHigh3', 'BetaHigh4', 'BetaHigh5', 'BetaHigh6', 'BetaHigh7', 'BetaHigh8',
        'Gamma1', 'Gamma2', 'Gamma3', 'Gamma4', 'Gamma5', 'Gamma6', 'Gamma7', 'Gamma8',
        'Delta_Avg', 'Theta_Avg', 'Alpha_Avg', 'BetaLow_Avg', 'BetaMid_Avg', 'BetaHigh_Avg', 'Gamma_Avg',
        'Delta_Bipolar_Avg', 'Theta_Bipolar_Avg', 'Alpha_Bipolar_Avg', 'BetaLow_Bipolar_Avg', 'BetaMid_Bipolar_Avg', 'BetaHigh_Bipolar_Avg', 'Gamma_Bipolar_Avg'

    ]
UDP_IP = "127.0.0.1"
UDP_PORT = 1000

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))

print("Starting real-time EEG data classification...")

while True:
    # Receive data from UDP
    data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes

    # Convert data to string from bytes, then to a list of values
    eeg_data_str = data.decode()
    eeg_data_list = eeg_data_str.split(',')

    # Ensure we have 70 features; replace 'NaN' with numerical value (e.g., 0)
    if len(eeg_data_list) == 70:
        eeg_data = [float(x) if x != 'NaN' else 0.0 for x in eeg_data_list]

        # Create a DataFrame with the correct feature names
        eeg_df = pd.DataFrame([eeg_data], columns=feature_names)

        # Predict using the model
        prediction = model.predict(eeg_df)
        print(f"Predicted class: {prediction[0]}")
    else:
        print("Received data does not match the expected feature size.")
